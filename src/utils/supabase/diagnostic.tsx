import { testSupabaseConnection, testAllTables, getConnectionInfo } from './connection-test';

export async function runFullDiagnostic() {
  console.log('üîß === DIAGN√ìSTICO COMPLETO DO SUPABASE ===');
  
  try {
    // 1. Teste b√°sico de conex√£o
    console.log('\nüì° 1. Testando conex√£o b√°sica...');
    const basicConnection = await testSupabaseConnection();
    console.log(`Resultado: ${basicConnection ? '‚úÖ Conectado' : '‚ùå Falha na conex√£o'}`);
    
    if (!basicConnection) {
      console.log('‚ùå Conex√£o b√°sica falhou. Verifique:');
      console.log('   - URL do projeto Supabase');
      console.log('   - Chave p√∫blica (anon key)');
      console.log('   - Conectividade com a internet');
      return;
    }
    
    // 2. Teste de todas as tabelas
    console.log('\nüìã 2. Testando tabelas...');
    const tables = await testAllTables();
    
    Object.entries(tables).forEach(([table, status]) => {
      console.log(`   ${table}: ${status ? '‚úÖ' : '‚ùå'}`);
    });
    
    // 3. Informa√ß√µes completas
    console.log('\nüìä 3. Obtendo informa√ß√µes detalhadas...');
    const info = await getConnectionInfo();
    
    console.log('\nüìà Contagem de registros por tabela:');
    Object.entries(info.totalRecords).forEach(([table, count]) => {
      console.log(`   ${table}: ${count} registros`);
    });
    
    // 4. Verifica√ß√µes espec√≠ficas
    console.log('\nüîç 4. Verifica√ß√µes espec√≠ficas...');
    
    // Verificar se h√° dados de teste
    const hasCompanies = info.totalRecords.companies > 0;
    const hasUsers = info.totalRecords.users > 0;
    const hasMealTypes = info.totalRecords.meal_types > 0;
    
    console.log(`   Empresas cadastradas: ${hasCompanies ? '‚úÖ' : '‚ö†Ô∏è'} (${info.totalRecords.companies})`);
    console.log(`   Usu√°rios cadastrados: ${hasUsers ? '‚úÖ' : '‚ö†Ô∏è'} (${info.totalRecords.users})`);
    console.log(`   Tipos de refei√ß√£o: ${hasMealTypes ? '‚úÖ' : '‚ö†Ô∏è'} (${info.totalRecords.meal_types})`);
    
    // 5. Recomenda√ß√µes
    console.log('\nüí° 5. Recomenda√ß√µes:');
    
    if (!hasCompanies) {
      console.log('   ‚ö†Ô∏è Cadastre pelo menos uma empresa');
    }
    
    if (!hasMealTypes) {
      console.log('   ‚ö†Ô∏è Cadastre pelo menos um tipo de refei√ß√£o');
    }
    
    if (!hasUsers) {
      console.log('   ‚ö†Ô∏è Cadastre pelo menos um usu√°rio para testar o sistema');
    }
    
    if (hasCompanies && hasMealTypes && hasUsers) {
      console.log('   ‚úÖ Sistema pronto para uso!');
    }
    
    console.log('\nüîß === FIM DO DIAGN√ìSTICO ===');
    
    return {
      connected: basicConnection,
      tables,
      info,
      recommendations: {
        needsCompanies: !hasCompanies,
        needsMealTypes: !hasMealTypes,
        needsUsers: !hasUsers,
        isReady: hasCompanies && hasMealTypes && hasUsers
      }
    };
    
  } catch (error) {
    console.error('‚ùå Erro durante o diagn√≥stico:', error);
    return null;
  }
}

// Fun√ß√£o para executar diagn√≥stico via console
export function diagSupabase() {
  return runFullDiagnostic();
}

// Adicionar ao objeto window para facilitar uso no console
if (typeof window !== 'undefined') {
  (window as any).diagSupabase = diagSupabase;
  console.log('üí° Dica: Digite "diagSupabase()" no console para executar diagn√≥stico completo');
  
  // Executar diagn√≥stico autom√°tico do sistema de refei√ß√µes extras
  import('./system-diagnostics').then(async ({ runAndPrintDiagnostics }) => {
    try {
      console.log('üîÑ Executando diagn√≥stico autom√°tico do sistema...');
      await runAndPrintDiagnostics();
    } catch (error) {
      console.error('‚ùå Falha no diagn√≥stico autom√°tico:', error);
    }
  }).catch(() => {
    console.log('‚ÑπÔ∏è Diagn√≥stico detalhado n√£o dispon√≠vel - use diagSupabase() para teste b√°sico');
  });
}