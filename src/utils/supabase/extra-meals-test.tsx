// Teste espec√≠fico para o sistema de refei√ß√µes extras
import { supabase } from './unified-client';
import { notifications } from '../../components/NotificationSystem';

export async function testExtraMealsConnection(): Promise<boolean> {
  console.log('üß™ Iniciando teste de conex√£o para extra_meals...');
  
  try {
    // 1. Testar conex√£o b√°sica
    console.log('üì° Testando conex√£o b√°sica com Supabase...');
    const { error: pingError } = await supabase
      .from('companies')
      .select('id')
      .limit(1);
    
    if (pingError) {
      console.error('‚ùå Erro na conex√£o b√°sica:', pingError);
      return false;
    }
    console.log('‚úÖ Conex√£o b√°sica OK');

    // 2. Testar se a tabela extra_meals existe
    console.log('üìã Verificando exist√™ncia da tabela extra_meals...');
    const { error: tableError } = await supabase
      .from('extra_meals')
      .select('id')
      .limit(1);
    
    if (tableError) {
      if (tableError.code === '42P01' || tableError.message.includes('does not exist')) {
        console.error('‚ùå Tabela extra_meals n√£o existe');
        notifications.error('Schema Necess√°rio', 'A tabela extra_meals n√£o existe. Execute o script CORRIGIR_EXTRA_MEALS_AGORA.sql');
        return false;
      }
      console.error('‚ùå Erro ao acessar extra_meals:', tableError);
      return false;
    }
    console.log('‚úÖ Tabela extra_meals existe');

    // 3. Testar se as colunas necess√°rias existem
    console.log('üîç Verificando colunas obrigat√≥rias...');
    const { error: schemaError } = await supabase
      .from('extra_meals')
      .select('id, requested_by_name, external_name, external_company')
      .limit(1);
    
    if (schemaError) {
      if (schemaError.message.includes('column') && schemaError.message.includes('does not exist')) {
        console.error('‚ùå Colunas obrigat√≥rias ausentes:', schemaError.message);
        notifications.error('Schema Desatualizado', 'Colunas necess√°rias n√£o encontradas. Execute o script CORRIGIR_EXTRA_MEALS_AGORA.sql');
        return false;
      }
      console.error('‚ùå Erro no schema:', schemaError);
      return false;
    }
    console.log('‚úÖ Schema das colunas OK');

    // 4. Testar query completa com relacionamentos
    console.log('üîó Testando query com relacionamentos...');
    const { error: relationError } = await supabase
      .from('extra_meals')
      .select(`
        id,
        user:users(
          id,
          full_name,
          company:companies(name)
        ),
        meal_type:meal_types(
          name,
          price
        )
      `)
      .limit(1);
    
    if (relationError) {
      console.error('‚ùå Erro nos relacionamentos:', relationError);
      // N√£o bloquear por relacionamentos, apenas avisar
      console.warn('‚ö†Ô∏è Relacionamentos podem ter problemas, mas tabela principal est√° acess√≠vel');
    } else {
      console.log('‚úÖ Relacionamentos OK');
    }

    console.log('üéâ Teste de conex√£o extra_meals conclu√≠do com sucesso!');
    return true;

  } catch (error: any) {
    console.error('‚ùå Erro cr√≠tico no teste de extra_meals:', error);
    
    if (error.message?.includes('Failed to fetch')) {
      notifications.error('Erro de Rede', 'N√£o foi poss√≠vel conectar ao Supabase. Verifique sua conex√£o com a internet.');
    } else {
      notifications.error('Erro de Teste', 'Falha no teste de conex√£o do sistema de refei√ß√µes extras.');
    }
    
    return false;
  }
}

export async function validateExtraMealsSchema(): Promise<{ isValid: boolean; missingColumns: string[] }> {
  const requiredColumns = [
    'id', 
    'user_id', 
    'meal_type_id', 
    'meal_date', 
    'reason', 
    'requested_by_name', 
    'status',
    'external_name',
    'external_company',
    'external_document'
  ];
  
  const missingColumns: string[] = [];
  
  try {
    console.log('üîç Validando schema completo da tabela extra_meals...');
    
    // Tentar selecionar cada coluna individualmente para identificar quais est√£o faltando
    for (const column of requiredColumns) {
      try {
        const { error } = await supabase
          .from('extra_meals')
          .select(column)
          .limit(1);
        
        if (error && error.message.includes('does not exist')) {
          missingColumns.push(column);
        }
      } catch (columnError: any) {
        if (columnError.message?.includes('does not exist')) {
          missingColumns.push(column);
        }
      }
    }
    
    const isValid = missingColumns.length === 0;
    
    if (isValid) {
      console.log('‚úÖ Schema completo v√°lido');
    } else {
      console.error('‚ùå Colunas faltando:', missingColumns);
    }
    
    return { isValid, missingColumns };
    
  } catch (error) {
    console.error('‚ùå Erro na valida√ß√£o do schema:', error);
    return { isValid: false, missingColumns: [...requiredColumns] };
  }
}

// Fun√ß√£o para executar teste completo e exibir resultados
export async function runFullExtraMealsTest(): Promise<void> {
  console.log('üöÄ Executando teste completo do sistema de refei√ß√µes extras...');
  
  const connectionOk = await testExtraMealsConnection();
  const schemaValidation = await validateExtraMealsSchema();
  
  if (connectionOk && schemaValidation.isValid) {
    console.log('üéâ Teste completo passou! Sistema de refei√ß√µes extras est√° funcionando.');
    notifications.success('Teste Conclu√≠do', 'Sistema de refei√ß√µes extras est√° funcionando perfeitamente.');
  } else {
    console.error('‚ùå Teste completo falhou!');
    
    if (!connectionOk) {
      console.error('- Problema de conex√£o');
    }
    
    if (!schemaValidation.isValid) {
      console.error('- Problemas no schema:', schemaValidation.missingColumns);
      notifications.error(
        'Schema Incompleto', 
        `Colunas faltando: ${schemaValidation.missingColumns.join(', ')}. Execute o script SQL de corre√ß√£o.`
      );
    }
  }
}